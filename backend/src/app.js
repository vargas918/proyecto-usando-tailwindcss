// =============================================
// APLICACI√ìN PRINCIPAL - TECHSTORE PRO BACKEND
// =============================================

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { connectDB } = require('./config/database');
const { errorHandler, notFound } = require('./middleware/errorHandler');
const { generalLimiter } = require('./middleware/rateLimiter'); // ‚ú® NUEVO


console.log('üöÄ Iniciando TechStore Pro Backend...');

// Crear aplicaci√≥n Express
const app = express();

// =============================================
// MIDDLEWARE DE LOGGING PERSONALIZADO TECHSTORE
// =============================================
app.use((req, res, next) => {
    const timestamp = new Date().toISOString();
    const method = req.method;
    const url = req.originalUrl;
    const ip = req.ip || req.connection.remoteAddress;
    
    // Identificar tipo de petici√≥n con iconos espec√≠ficos
    let requestType = 'üì°';
    if (url.includes('/products')) requestType = 'üì±';
    if (url.includes('/users')) requestType = 'üë§';
    if (url.includes('/orders')) requestType = 'üõí';
    if (url.includes('/auth')) requestType = 'üîê';
    if (url.includes('/health')) requestType = 'üíö';
    
    console.log(`${requestType} ${timestamp} - ${method} ${url} - IP: ${ip}`);
    next();
});
// =============================================
// RATE LIMITING - PROTECCI√ìN CONTRA ABUSO
// =============================================
// Aplicar rate limiting a todas las rutas de la API
app.use('/api/', generalLimiter);
console.log('üõ°Ô∏è  Rate Limiting activado: 100 peticiones/15min por IP');
// =============================================
// CONFIGURACI√ìN CORS MEJORADA PARA TECHSTORE
// =============================================
app.use(cors({
    origin: [
        'http://localhost:3000',      // React desarrollo
        'http://127.0.0.1:5500',      // Live Server
        'http://localhost:8080',      // Webpack
        'http://localhost:5173',      // Vite
        'https://techstore-pro.vercel.app', // Producci√≥n (ejemplo)
    ],
    credentials: true,
    optionsSuccessStatus: 200,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    exposedHeaders: ['X-Total-Count', 'X-Page-Count'] // Para paginaci√≥n
}));

// =============================================
// MIDDLEWARE DE PARSEO OPTIMIZADO
// =============================================
// Aumentar l√≠mite para im√°genes de productos
app.use(express.json({ 
    limit: '10mb',
    verify: (req, res, buf) => {
        // Log para requests grandes (posibles uploads de im√°genes)
        if (buf.length > 1000000) { // > 1MB
            console.log(`üìÅ Request grande detectado: ${(buf.length / 1024 / 1024).toFixed(2)}MB`);
        }
    }
}));

app.use(express.urlencoded({ 
    extended: true, 
    limit: '10mb' 
}));

// =============================================
// CONECTAR A MONGODB ATLAS
// =============================================
connectDB();

// =============================================
// RUTAS PRINCIPALES DE TECHSTORE PRO
// =============================================

// Ruta principal - Informaci√≥n mejorada de la API
app.get('/', (req, res) => {
    res.json({
        success: true,
        message: 'üè™ TechStore Pro API funcionando correctamente',
        version: process.env.APP_VERSION || '1.0.0',
        environment: process.env.NODE_ENV || 'development',
        timestamp: new Date().toISOString(),
        endpoints: {
            products: {
                description: 'Cat√°logo de productos tecnol√≥gicos',
                routes: {
                    list: 'GET /api/products',
                    details: 'GET /api/products/:id',
                    create: 'POST /api/products (Admin)',
                    update: 'PUT /api/products/:id (Admin)',
                    delete: 'DELETE /api/products/:id (Admin)',
                    categories: 'GET /api/products/categories',
                    featured: 'GET /api/products/featured',
                    search: 'GET /api/products/search?q=macbook'
                }
            },
            users: {
                description: 'Gesti√≥n de usuarios y perfiles',
                routes: {
                    register: 'POST /api/auth/register',
                    login: 'POST /api/auth/login',
                    profile: 'GET /api/users/profile',
                    list: 'GET /api/users (Admin)'
                }
            },
            orders: {
                description: 'Gesti√≥n de pedidos y compras',
                routes: {
                    create: 'POST /api/orders',
                    list: 'GET /api/orders',
                    details: 'GET /api/orders/:id',
                    userOrders: 'GET /api/orders/user/:userId'
                }
            },
            health: 'GET /api/health'
        },
        features: [
            'Cat√°logo completo de productos Apple y tecnolog√≠a',
            'Sistema de autenticaci√≥n seguro con JWT',
            'Gesti√≥n de pedidos en tiempo real',
            'Filtros avanzados por categor√≠a y precio',
            'B√∫squeda inteligente de productos',
            'Manejo profesional de errores',
            'Validaciones autom√°ticas de datos',
            'Rate Limiting contra ataques de fuerza bruta'
        ]
    });
});

// Ruta de health check mejorada
app.get('/api/health', (req, res) => {
    const mongoose = require('mongoose');
    
    const dbStates = {
        0: 'Disconnected',
        1: 'Connected',
        2: 'Connecting',
        3: 'Disconnecting'
    };
    
    res.json({
        success: true,
        timestamp: new Date().toISOString(),
        service: 'TechStore Pro API',
        version: process.env.APP_VERSION || '1.0.0',
        database: {
            status: dbStates[mongoose.connection.readyState],
            name: mongoose.connection.name || 'No conectado',
            host: mongoose.connection.host || 'N/A'
        },
        memory: {
            used: `${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)} MB`,
            total: `${(process.memoryUsage().heapTotal / 1024 / 1024).toFixed(2)} MB`
        },
        uptime: {
            seconds: Math.floor(process.uptime()),
            formatted: `${Math.floor(process.uptime() / 60)}m ${Math.floor(process.uptime() % 60)}s`
        },
        middleware: {
            errorHandler: 'Activo',
            validation: 'Activo',
            cors: 'Configurado',
            logging: 'Personalizado',
            rateLimiting: 'Activo'
        }
    });
});

// =============================================
// RUTAS DE LA API - TECHSTORE PRO
// =============================================

// Rutas de productos
app.use('/api/products', require('./Routes/products'));
// Rutas de autenticaci√≥n
app.use('/api/auth', require('./routes/auth'));

console.log('‚úÖ Rutas API configuradas:');
console.log('   üì± /api/products - Gesti√≥n de productos');
console.log('   üîê /api/auth - Autenticaci√≥n y usuarios');
console.log('   üè• /api/health - Estado del servidor');

// TODO: Futuras rutas
// app.use('/api/users', require('./routes/users'));
// app.use('/api/orders', require('./routes/orders'));
// app.use('/api/auth', require('./routes/auth'));
app.use(notFound);

// Middleware de manejo global de errores (siempre al final)
app.use(errorHandler);

module.exports = app;

/**
 * CONFIGURACI√ìN COMPLETADA PARA TECHSTORE PRO ‚úÖ
 * 
 * Middleware implementado:
 * ‚úÖ Logging personalizado con iconos por tipo de petici√≥n
 * ‚úÖ CORS configurado para desarrollo y producci√≥n
 * ‚úÖ Parseo de JSON con l√≠mites para im√°genes
 * ‚úÖ Rutas de informaci√≥n y health check mejoradas
 * ‚úÖ Manejo global de errores profesional
 * ‚úÖ Respuestas 404 personalizadas con sugerencias
 * 
 * Pr√≥ximos pasos (Parte 3B):
 * üéØ Crear controladores de productos
 * üéØ Implementar rutas REST para productos
 * üéØ Probar con Postman
 */