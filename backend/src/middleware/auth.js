// =============================================
// MIDDLEWARE DE AUTENTICACI√ìN - TECHSTORE PRO
// =============================================

const jwt = require('jsonwebtoken');
const User = require('../models/User');

console.log('üîê Inicializando middleware de autenticaci√≥n');

// =============================================
// MIDDLEWARE: PROTECT - VERIFICAR TOKEN JWT
// =============================================

/**
 * Middleware para proteger rutas que requieren autenticaci√≥n
 * 
 * ¬øQu√© hace?
 * 1. Busca el token JWT en los headers
 * 2. Verifica que el token sea v√°lido
 * 3. Extrae el ID del usuario del token
 * 4. Busca el usuario en la base de datos
 * 5. Agrega el usuario a req.user
 * 6. Contin√∫a con next()
 * 
 * ¬øCu√°ndo se usa?
 * - Ver perfil de usuario
 * - Actualizar datos personales
 * - Crear/editar/eliminar productos (admin)
 * - Cualquier ruta que requiera saber qui√©n es el usuario
 */
const protect = async (req, res, next) => {
    let token;
    
    console.log('üîí Middleware protect: Verificando autenticaci√≥n...');
    
    // =============================================
    // PASO 1: BUSCAR TOKEN EN HEADERS
    // =============================================
    
    /**
     * El token puede venir en el header Authorization de 2 formas:
     * 
     * Forma 1 (est√°ndar Bearer):
     * Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
     * 
     * Forma 2 (solo token):
     * Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
     */
    
    if (
        req.headers.authorization &&
        req.headers.authorization.startsWith('Bearer')
    ) {
        // Token con formato Bearer
        token = req.headers.authorization.split(' ')[1];
        console.log('   ‚úÖ Token encontrado en header (Bearer)');
    } else if (req.headers.authorization) {
        // Token sin Bearer
        token = req.headers.authorization;
        console.log('   ‚úÖ Token encontrado en header (directo)');
    }
    
    // Si no hay token en headers, verificar en cookies (opcional)
    if (!token && req.cookies && req.cookies.token) {
        token = req.cookies.token;
        console.log('   ‚úÖ Token encontrado en cookies');
    }
    
    // =============================================
    // PASO 2: VERIFICAR QUE EXISTE EL TOKEN
    // =============================================
    
    if (!token) {
        console.log('   ‚ùå No se encontr√≥ token');
        return res.status(401).json({
            success: false,
            error: 'No autorizado',
            message: 'No se proporcion√≥ token de autenticaci√≥n',
            hint: 'Incluye el token en el header: Authorization: Bearer <token>'
        });
    }
    
    try {
        // =============================================
        // PASO 3: VERIFICAR Y DECODIFICAR TOKEN
        // =============================================
        
        console.log('   üîç Verificando token con JWT_SECRET...');
        
        /**
         * jwt.verify() hace 3 cosas:
         * 1. Verifica que la firma sea v√°lida (usando JWT_SECRET)
         * 2. Verifica que no haya expirado
         * 3. Decodifica el payload del token
         * 
         * Si algo falla, lanza un error que capturamos en catch
         */
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        
        console.log('   ‚úÖ Token v√°lido');
        console.log(`   üë§ Usuario ID: ${decoded.id}`);
        console.log(`   üìß Email: ${decoded.email}`);
        console.log(`   üé≠ Rol: ${decoded.role}`);
        
        // =============================================
        // PASO 4: BUSCAR USUARIO EN BASE DE DATOS
        // =============================================
        
        console.log('   üîç Buscando usuario en MongoDB...');
        
        /**
         * ¬øPor qu√© buscar el usuario si ya tenemos su info en el token?
         * 
         * 1. El token podr√≠a ser viejo y el usuario fue eliminado
         * 2. El usuario podr√≠a estar desactivado
         * 3. El rol del usuario podr√≠a haber cambiado
         * 4. Necesitamos datos completos del usuario (no solo lo que est√° en el token)
         * 
         * Siempre buscar el usuario para tener datos actualizados
         */
        const user = await User.findById(decoded.id).select('-password');
        
        if (!user) {
            console.log('   ‚ùå Usuario no encontrado en BD');
            return res.status(401).json({
                success: false,
                error: 'Usuario no encontrado',
                message: 'El usuario del token no existe'
            });
        }
        
        // =============================================
        // PASO 5: VERIFICAR ESTADO DEL USUARIO
        // =============================================
        
        /**
         * Verificaciones adicionales de seguridad
         */
        
        // Verificar si la cuenta est√° activa
        if (!user.isActive) {
            console.log('   ‚ùå Cuenta desactivada');
            return res.status(401).json({
                success: false,
                error: 'Cuenta desactivada',
                message: 'Tu cuenta ha sido desactivada. Contacta soporte.'
            });
        }
        
        // Verificar si la cuenta est√° bloqueada (demasiados intentos fallidos)
        if (user.isLocked) {
            console.log('   üîí Cuenta bloqueada temporalmente');
            return res.status(401).json({
                success: false,
                error: 'Cuenta bloqueada',
                message: 'Cuenta bloqueada por seguridad. Intenta m√°s tarde.'
            });
        }
        
        console.log('   ‚úÖ Usuario v√°lido y activo');
        
        // =============================================
        // PASO 6: AGREGAR USUARIO A REQUEST
        // =============================================
        
        /**
         * Agregar el usuario completo a req.user
         * Ahora cualquier controlador que venga despu√©s puede usar:
         * - req.user.id
         * - req.user.email
         * - req.user.role
         * - req.user.firstName
         * - etc.
         */
        req.user = user;
        
        console.log('   üéâ Autenticaci√≥n exitosa');
        console.log(`   üìù req.user establecido para: ${user.email}`);
        
        // =============================================
        // PASO 7: CONTINUAR CON SIGUIENTE MIDDLEWARE
        // =============================================
        
        /**
         * next() le dice a Express:
         * "Todo bien aqu√≠, contin√∫a con la siguiente funci√≥n"
         * 
         * Puede ser:
         * - Otro middleware (authorize)
         * - El controlador final
         */
        next();
        
    } catch (error) {
        // =============================================
        // MANEJO DE ERRORES ESPEC√çFICOS DE JWT
        // =============================================
        
        console.log(`   ‚ùå Error en verificaci√≥n: ${error.name}`);
        
        /**
         * Diferentes tipos de errores JWT:
         */
        
        // Error 1: Token malformado o firma inv√°lida
        if (error.name === 'JsonWebTokenError') {
            console.log('   ‚ö†Ô∏è Token inv√°lido o malformado');
            return res.status(401).json({
                success: false,
                error: 'Token inv√°lido',
                message: 'El token proporcionado no es v√°lido',
                hint: 'Obt√©n un nuevo token haciendo login'
            });
        }
        
        // Error 2: Token expirado
        if (error.name === 'TokenExpiredError') {
            console.log('   ‚è∞ Token expirado');
            return res.status(401).json({
                success: false,
                error: 'Token expirado',
                message: 'Tu sesi√≥n ha expirado',
                hint: 'Por favor inicia sesi√≥n nuevamente',
                expiredAt: error.expiredAt
            });
        }
        
        // Error 3: Token usado antes de su fecha de inicio (raro)
        if (error.name === 'NotBeforeError') {
            console.log('   ‚è∞ Token no v√°lido a√∫n');
            return res.status(401).json({
                success: false,
                error: 'Token no v√°lido',
                message: 'Token no es v√°lido todav√≠a'
            });
        }
        
        // Error gen√©rico
        console.error('   üí• Error inesperado:', error.message);
        return res.status(401).json({
            success: false,
            error: 'Error de autenticaci√≥n',
            message: 'Ocurri√≥ un error al verificar el token'
        });
    }
};

// =============================================
// MIDDLEWARE: AUTHORIZE - VERIFICAR ROLES
// =============================================

const authorize = (...roles) => {
    return (req, res, next) => {
        console.log('üîê Middleware authorize: Verificando permisos...');
        
        // PASO 1: VERIFICAR QUE EXISTE req.user
        if (!req.user) {
            console.log('   ‚ùå No hay usuario autenticado (protect no ejecutado)');
            return res.status(401).json({
                success: false,
                error: 'No autenticado',
                message: 'Debes iniciar sesi√≥n para realizar esta acci√≥n'
            });
        }
        
        console.log(`   üë§ Usuario: ${req.user.email}`);
        console.log(`   üé≠ Rol actual: ${req.user.role}`);
        console.log(`   üìã Roles permitidos: ${roles.join(', ')}`);
        
        // PASO 2: VERIFICAR SI EL ROL EST√Å PERMITIDO
        if (!roles.includes(req.user.role)) {
            console.log('   ‚ùå Rol insuficiente');
            console.log(`   üö´ Se requiere: ${roles.join(' o ')}`);
            console.log(`   üë§ Usuario tiene: ${req.user.role}`);
            
            return res.status(403).json({
                success: false,
                error: 'Acceso denegado',
                message: `Esta acci√≥n requiere rol de ${roles.join(' o ')}`,
                userRole: req.user.role,
                requiredRoles: roles
            });
        }
        
        // PASO 3: PERMISO CONCEDIDO
        console.log('   ‚úÖ Permiso concedido');
        console.log(`   üéâ Usuario ${req.user.email} puede realizar esta acci√≥n`);
        
        next();
    };
};
// =============================================
// EXPORTAR MIDDLEWARE
// =============================================

module.exports = {
    protect,
    authorize
};

console.log('‚úÖ Middleware de autenticaci√≥n exportado');
console.log('üîê Funciones disponibles:');
console.log('   ‚Ä¢ protect - Verificar token JWT y cargar usuario');
console.log('   ‚Ä¢ authorize - Verificar roles de usuario');

/**
 * EJEMPLO DE USO EN RUTAS:
 * 
 * Sin protecci√≥n:
 * router.get('/products', getAllProducts);
 * 
 * Con protecci√≥n:
 * router.get('/profile', protect, getProfile);
 * 
 * Con protecci√≥n y autorizaci√≥n:
 * router.post('/products', protect, authorize('admin'), createProduct);
 */